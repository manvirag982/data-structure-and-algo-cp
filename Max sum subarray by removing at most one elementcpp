// again a kadane application

/*Max sum subarray by removing at most one element

/*You are given array A of size n. You need to find the maximum-sum sub-array 
with the condition that you are allowed to skip at most one element.*/

// we can use kadane algorith from right and left ....then will be get to know max sum towards right and left of a particular index...i mainly negative
#include<bits/stdc++.h>
using namespace std;
int main()
{
   int t ; cin>>t; while(t--){

    int lka[n]={0};   //kadane from left
    int rka[n]={0};   // kadane from right
    int sum=0;
    int res=INT_MIN;
    lka[0]=A[0];
    rka[n-1]=A[n-1];
    for(int i=1;i<n;i++)
    lka[i]=max(lka[i-1]+A[i],A[i]); 
    for(int i=n-2;i>=0;i--)
    rka[i]=max(rka[i+1]+A[i],A[i]);
    
    for(int i=0;i<n;i++)
    {
        if(i==0)
        sum=rka[i+1];
        else if(i==n-1)
        sum=lka[i-1];
        else 
        {
            sum=lka[i-1]+rka[i+1];
        }
        
        res=(max(res,max(sum,max(lka[i],rka[i]))));
        
        sum=0;
    }
    cout res;
   } 
    
    return 0;
    
        
}
